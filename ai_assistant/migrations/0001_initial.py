# Generated by Django 4.2.10 on 2025-05-18 22:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('general', 'General'), ('financial', 'Financial'), ('budgeting', 'Budgeting'), ('forecasting', 'Forecasting'), ('analysis', 'Analysis'), ('recommendation', 'Recommendation')], default='general', max_length=20, verbose_name='type')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('context', models.JSONField(default=dict, verbose_name='context')),
                ('current_state', models.JSONField(default=dict, verbose_name='current state')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to='organizations.organization', verbose_name='organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'AI conversation',
                'verbose_name_plural': 'AI conversations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('type', models.CharField(choices=[('classification', 'Classification'), ('regression', 'Regression'), ('forecasting', 'Forecasting'), ('clustering', 'Clustering'), ('anomaly_detection', 'Anomaly Detection')], max_length=30, verbose_name='type')),
                ('description', models.TextField(verbose_name='description')),
                ('version', models.CharField(max_length=50, verbose_name='version')),
                ('parameters', models.JSONField(default=dict, verbose_name='parameters')),
                ('metrics', models.JSONField(default=dict, verbose_name='metrics')),
                ('last_trained', models.DateTimeField(blank=True, null=True, verbose_name='last trained')),
                ('training_duration', models.DurationField(blank=True, null=True, verbose_name='training duration')),
                ('training_data_range', models.JSONField(default=dict, help_text='Start and end dates of training data', verbose_name='training data range')),
                ('accuracy', models.FloatField(blank=True, null=True, verbose_name='accuracy')),
                ('error_rate', models.FloatField(blank=True, null=True, verbose_name='error rate')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_production', models.BooleanField(default=False, verbose_name='in production')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'AI model',
                'verbose_name_plural': 'AI models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('budget_adjustment', 'Budget Adjustment'), ('expense_reduction', 'Expense Reduction'), ('investment', 'Investment'), ('savings', 'Savings'), ('debt_management', 'Debt Management'), ('tax_planning', 'Tax Planning'), ('cash_flow', 'Cash Flow')], max_length=30, verbose_name='type')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(verbose_name='description')),
                ('rationale', models.TextField(verbose_name='rationale')),
                ('potential_impact', models.TextField(verbose_name='potential impact')),
                ('data', models.JSONField(default=dict, verbose_name='data')),
                ('metrics', models.JSONField(default=dict, help_text='Quantifiable metrics for this recommendation', verbose_name='metrics')),
                ('is_implemented', models.BooleanField(default=False, verbose_name='implemented')),
                ('implementation_notes', models.TextField(blank=True, verbose_name='implementation notes')),
                ('implemented_at', models.DateTimeField(blank=True, null=True, verbose_name='implemented at')),
                ('follow_up_date', models.DateField(blank=True, null=True, verbose_name='follow up date')),
                ('follow_up_notes', models.TextField(blank=True, verbose_name='follow up notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('implemented_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='implemented_recommendations', to=settings.AUTH_USER_MODEL, verbose_name='implemented by')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to='organizations.organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'AI recommendation',
                'verbose_name_plural': 'AI recommendations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant'), ('system', 'System')], max_length=20, verbose_name='role')),
                ('content', models.TextField(verbose_name='content')),
                ('data', models.JSONField(blank=True, default=dict, verbose_name='data')),
                ('tokens_used', models.IntegerField(default=0, verbose_name='tokens used')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('processed', models.BooleanField(default=False, verbose_name='processed')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_assistant.aiconversation', verbose_name='conversation')),
            ],
            options={
                'verbose_name': 'AI message',
                'verbose_name_plural': 'AI messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('spending_pattern', 'Spending Pattern'), ('budget_alert', 'Budget Alert'), ('saving_opportunity', 'Saving Opportunity'), ('investment_suggestion', 'Investment Suggestion'), ('cash_flow_prediction', 'Cash Flow Prediction'), ('anomaly_detection', 'Anomaly Detection'), ('tax_optimization', 'Tax Optimization')], max_length=30, verbose_name='type')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(verbose_name='description')),
                ('data', models.JSONField(default=dict, verbose_name='data')),
                ('severity', models.CharField(choices=[('info', 'Information'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='info', max_length=20, verbose_name='severity')),
                ('confidence_score', models.FloatField(default=0.0, help_text='AI confidence in this insight (0-1)', verbose_name='confidence score')),
                ('valid_from', models.DateTimeField(auto_now_add=True, verbose_name='valid from')),
                ('valid_until', models.DateTimeField(blank=True, null=True, verbose_name='valid until')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('action_taken', models.BooleanField(default=False, verbose_name='action taken')),
                ('action_taken_at', models.DateTimeField(blank=True, null=True, verbose_name='action taken at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('action_taken_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions_taken', to=settings.AUTH_USER_MODEL, verbose_name='action taken by')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_insights', to='organizations.organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'AI insight',
                'verbose_name_plural': 'AI insights',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['organization', 'type', '-created_at'], name='ai_assistan_organiz_941554_idx'), models.Index(fields=['organization', 'severity', '-created_at'], name='ai_assistan_organiz_03c045_idx')],
            },
        ),
    ]
